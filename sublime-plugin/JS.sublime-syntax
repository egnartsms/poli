%YAML 1.2
---
name: Poli JS
scope: source.poli.js
hidden: true

contexts:
  prototype:
    - match: ^\s*((//).*)$
      captures:
        1: comment.line
        2: punctuation.definition.comment

  main:
    - match: ^-+$
      scope: punctuation.terminator.poli.end-of-imports
      set: contents
    - match: ^.*$
      scope: meta.import.poli.module
      push: module-imports

  module-imports:
    - match: ^(?=\S)
      pop: true
    - match: '^\s+(\*) (as:) (\S+)$'
      captures:
        1: meta.import.poli.asterisk
        2: keyword.other
        3: meta.import.poli.alias variable.other
    - match: '^\s+(\S+)(?: (as:) (\S+))?$'
      captures:
        1: meta.import.poli.entry variable.other
        2: keyword.other
        3: meta.import.poli.alias variable.other
    - match: ^.+$
      scope: invalid.illegal

  contents:
    - match: '^(\S+) (\s*)(::=) '
      captures:
        1: entity.name.entry meta.entry.name
        2: invalid.illegal.excessive-whitespace
        3: punctuation.separator.poli.defined-as
      embed: Packages/JavaScript/JavaScript.sublime-syntax
      escape: '^(?=(\S+ ::= )|(<+\s*$))'
      embed_scope: meta.entry.def
    - match: '^<+\s*$'
      scope: punctuation.separator.poli.new-entry.start
      push:
        - match: '^(\S+) (\s*)(::=)'
          captures:
            1: entity.name.entry
            2: invalid.illegal.excessive-whitespace
            3: punctuation.separator.poli.defined-as
          embed: Packages/JavaScript/JavaScript.sublime-syntax
          escape: '^(?=>+\s*$)'
        - match: ^>+\s*$
          scope: punctuation.separator.poli.new-entry.end
          pop: true
        - match: ^
          embed: Packages/JavaScript/JavaScript.sublime-syntax
          escape: '^(?=>+\s*$)'
